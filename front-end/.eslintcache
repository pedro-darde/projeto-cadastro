[{"C:\\Users\\T-Gamer\\Documents\\Projects\\projeto-cadastro\\projeto-cadastro\\front-end\\src\\index.tsx":"1","C:\\Users\\T-Gamer\\Documents\\Projects\\projeto-cadastro\\projeto-cadastro\\front-end\\src\\reportWebVitals.ts":"2","C:\\Users\\T-Gamer\\Documents\\Projects\\projeto-cadastro\\projeto-cadastro\\front-end\\src\\App.tsx":"3","C:\\Users\\T-Gamer\\Documents\\Projects\\projeto-cadastro\\projeto-cadastro\\front-end\\src\\routes.tsx":"4","C:\\Users\\T-Gamer\\Documents\\Projects\\projeto-cadastro\\projeto-cadastro\\front-end\\src\\components\\Lista\\listagem.tsx":"5","C:\\Users\\T-Gamer\\Documents\\Projects\\projeto-cadastro\\projeto-cadastro\\front-end\\src\\components\\Login\\Login.tsx":"6","C:\\Users\\T-Gamer\\Documents\\Projects\\projeto-cadastro\\projeto-cadastro\\front-end\\src\\components\\Register\\Register.tsx":"7","C:\\Users\\T-Gamer\\Documents\\Projects\\projeto-cadastro\\projeto-cadastro\\front-end\\src\\components\\Formulario\\FormularioCadastro.tsx":"8","C:\\Users\\T-Gamer\\Documents\\Projects\\projeto-cadastro\\projeto-cadastro\\front-end\\src\\components\\NavBar\\NavBar.tsx":"9"},{"size":517,"mtime":1611787490907,"results":"10","hashOfConfig":"11"},{"size":440,"mtime":1611787490908,"results":"12","hashOfConfig":"11"},{"size":246,"mtime":1611872948663,"results":"13","hashOfConfig":"11"},{"size":826,"mtime":1612224604489,"results":"14","hashOfConfig":"11"},{"size":6250,"mtime":1612224296875,"results":"15","hashOfConfig":"11"},{"size":3702,"mtime":1612222185556,"results":"16","hashOfConfig":"11"},{"size":5981,"mtime":1612222185558,"results":"17","hashOfConfig":"11"},{"size":7780,"mtime":1612222230120,"results":"18","hashOfConfig":"11"},{"size":730,"mtime":1612222185557,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"r4uu9j",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\Users\\T-Gamer\\Documents\\Projects\\projeto-cadastro\\projeto-cadastro\\front-end\\src\\index.tsx",[],["42","43"],"C:\\Users\\T-Gamer\\Documents\\Projects\\projeto-cadastro\\projeto-cadastro\\front-end\\src\\reportWebVitals.ts",[],"C:\\Users\\T-Gamer\\Documents\\Projects\\projeto-cadastro\\projeto-cadastro\\front-end\\src\\App.tsx",[],"C:\\Users\\T-Gamer\\Documents\\Projects\\projeto-cadastro\\projeto-cadastro\\front-end\\src\\routes.tsx",["44"],"C:\\Users\\T-Gamer\\Documents\\Projects\\projeto-cadastro\\projeto-cadastro\\front-end\\src\\components\\Lista\\listagem.tsx",["45","46"],"import axios from \"axios\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"../Lista/style.css\";\r\nimport * as icons from \"react-icons/fa\";\r\nimport * as md from \"@material-ui/core\";\r\nimport Skeleton from \"react-loading-skeleton\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  withStyles,\r\n  Theme,\r\n  createStyles,\r\n  makeStyles,\r\n} from \"@material-ui/core/styles\";\r\n\r\ninterface IRegisters {\r\n  id: number;\r\n  nome: string;\r\n  sobrenome: string;\r\n  cpf: string;\r\n  promocao: boolean;\r\n  novidades: boolean;\r\n  dataCadastro: Date;\r\n  email: string;\r\n  dataNascimento: string;\r\n}\r\n\r\n\r\nexport default function ListagemCadastro() {\r\n  const [registers, setRegisters] = useState<IRegisters[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const dateFormat = require(\"dateformat\");\r\n  const url = \"http://localhost:3333/register\";\r\n  const history = useHistory();\r\n\r\n  const {token}  = JSON.parse(localStorage.getItem('usuario') !)\r\n  console.log(token)\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(url, {\r\n        headers: {\r\n          \"X-Access-Token\": `Bearer ${token}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setRegisters(response.data);\r\n        setLoading(false);\r\n        console.log(response.data);\r\n      });\r\n  }, []);\r\n\r\n  const StyledTableCell = withStyles((theme: Theme) =>\r\n    createStyles({\r\n      head: {\r\n        backgroundColor: theme.palette.common.black,\r\n        color: theme.palette.common.white,\r\n      },\r\n      body: {\r\n        fontSize: 14,\r\n      },\r\n    })\r\n  )(md.TableCell);\r\n\r\n  const StyledTableRow = withStyles((theme: Theme) =>\r\n    createStyles({\r\n      root: {\r\n        \"&:nth-of-type(odd)\": {\r\n          backgroundColor: theme.palette.action.hover,\r\n        },\r\n      },\r\n    })\r\n  )(md.TableRow);\r\n\r\n  const useStyles = makeStyles({\r\n    table: {\r\n      minWidth: 700,\r\n    },\r\n    root: {\r\n      width: \"100%\",\r\n    },\r\n    container: {\r\n      maxHeight: 440,\r\n    },\r\n  });\r\n\r\n  const classes = useStyles();\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n  const handleChangeRowsPerPage = (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  if (loading) {\r\n    return <Skeleton width={1366} height={768} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\" id=\"container-tabela\">\r\n      <div className=\"overflow-auto\">\r\n        <md.Paper className={classes.root}>\r\n          <md.TableContainer component={md.Paper} className={classes.container}>\r\n            <md.Table\r\n              stickyHeader\r\n              aria-label=\"customized table\"\r\n              className={classes.table}\r\n            >\r\n              <md.TableHead>\r\n                <StyledTableRow>\r\n                  <StyledTableCell>ID</StyledTableCell>\r\n                  <StyledTableCell align=\"right\">Nome</StyledTableCell>\r\n                  <StyledTableCell align=\"right\">Sobrenome</StyledTableCell>\r\n                  <StyledTableCell align=\"right\">CPF</StyledTableCell>\r\n                  <StyledTableCell align=\"right\">Promoção</StyledTableCell>\r\n                  <StyledTableCell align=\"right\">Novidades</StyledTableCell>\r\n                  <StyledTableCell align=\"right\">Data Cadastro</StyledTableCell>\r\n                  <StyledTableCell align=\"right\">Email</StyledTableCell>\r\n                  <StyledTableCell align=\"right\">\r\n                    Data Nascimento\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align=\"right\" />\r\n                </StyledTableRow>\r\n              </md.TableHead>\r\n              <md.TableBody>\r\n                {registers\r\n                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                  .map((row) => (\r\n                    <StyledTableRow key={row.id}>\r\n                      <StyledTableCell component=\"th\" scope=\"row\">\r\n                        {row.id}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align=\"right\">\r\n                        {row.nome}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align=\"right\">\r\n                        {row.sobrenome}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align=\"right\">{row.cpf}</StyledTableCell>\r\n                      <StyledTableCell align=\"right\">\r\n                        {row.promocao ? \"Sim\" : \"Não\"}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align=\"right\">\r\n                        {row.novidades ? \"Sim\" : \"Não\"}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align=\"right\">\r\n                        {dateFormat(row.dataCadastro, \"dd/mm/yyyy\")}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align=\"right\">\r\n                        {row.email}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align=\"right\">\r\n                        {dateFormat(row.dataNascimento, \"dd/mm/yyyy\")}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align=\"right\">\r\n                        <a\r\n                          className=\"btn btn-primary\"\r\n                          onClick={() => {\r\n                            history.push(`/register/${row.id}`);\r\n                          }}\r\n                        >\r\n                          {\" \"}\r\n                          <icons.FaEdit />{\" \"}\r\n                        </a>\r\n                      </StyledTableCell>\r\n                    </StyledTableRow>\r\n                  ))}\r\n              </md.TableBody>\r\n            </md.Table>\r\n          </md.TableContainer>\r\n          <md.TablePagination\r\n            rowsPerPageOptions={[10, 25, 100]}\r\n            component=\"div\"\r\n            count={registers.length}\r\n            rowsPerPage={rowsPerPage}\r\n            page={page}\r\n            onChangePage={handleChangePage}\r\n            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n          />\r\n        </md.Paper>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\T-Gamer\\Documents\\Projects\\projeto-cadastro\\projeto-cadastro\\front-end\\src\\components\\Login\\Login.tsx",[],"C:\\Users\\T-Gamer\\Documents\\Projects\\projeto-cadastro\\projeto-cadastro\\front-end\\src\\components\\Register\\Register.tsx",["47","48"],"import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport * as md from \"@material-ui/core\";\r\nimport \"../Lista/style.css\";\r\nimport \"./style.css\";\r\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\r\nimport AlternateEmailIcon from \"@material-ui/icons/AlternateEmail\";\r\nimport ContactsIcon from '@material-ui/icons/Contacts';\r\nimport \"date-fns\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardTimePicker,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\ninterface RegisterParams {\r\n  id: string;\r\n}\r\nexport default function Register() {\r\n  const params = useParams<RegisterParams>();\r\n  const [nome, setNome] = useState<string>(\"\");\r\n  const [sobrenome, setSobrenome] = useState<string>(\"\");\r\n  const [cpf, setCpf] = useState<string>(\"\");\r\n  const [promocao, setPromocao] = useState<boolean>(true);\r\n  const [novidade, setNovidades] = useState<boolean>(true);\r\n  const [dataCadastro, setDataCadastro] = useState<Date>();\r\n  const[email,setEmail]=useState<string>(\"\")\r\n  const[dataNascimento,setDataNascimento]=useState<Date|null>();\r\n  const dateFormat = require(\"dateformat\");\r\n  const formatCPFNumbers = (value: any) => {\r\n    return value.replace(/(\\d{3})(\\d{3})(\\d{3})(\\d{2})/g, \"$1.$2.$3-$4\");\r\n  };\r\n  useEffect(() => {\r\n    axios\r\n      .get(`http://localhost:3333/register/${params.id}`)\r\n      .then((response) => {\r\n        setNome(response.data.nome);\r\n        setSobrenome(response.data.sobrenome);\r\n        setCpf(response.data.cpf);\r\n        setPromocao(response.data.promocao);\r\n        setNovidades(response.data.novidades);\r\n        setDataCadastro(response.data.dataCadastro);\r\n        setEmail(response.data.email);\r\n        setDataNascimento(response.data.dataNascimento)\r\n      });\r\n  }, []);\r\n\r\n  async function editRegister() {\r\n    axios.patch(\"http://localhost:3333/register\", {\r\n      id: params.id,\r\n      nome: nome,\r\n      sobrenome: sobrenome,\r\n      cpf: cpf,\r\n      promocao: promocao,\r\n      novidades: novidade,\r\n      dataCadastro: dataCadastro,\r\n      email: email,\r\n      dataNascimento: dataNascimento\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\" id=\"container-cadastro\">\r\n      <label id=\"data-cadastro\">\r\n        Data do cadastro : {dateFormat(dataCadastro, \"dd/mm/yyyy\")}\r\n      </label>\r\n      <form className=\"form-submit\">\r\n        <md.DialogTitle>Editar Cadastro </md.DialogTitle>\r\n        <md.TextField\r\n          variant=\"outlined\"\r\n          fullWidth={true}\r\n          id=\"input-nome\"\r\n          margin=\"normal\"\r\n          value={nome}\r\n          label=\"Nome\"\r\n          onChange={(event) => {\r\n            setNome(event.target.value);\r\n          }}\r\n          InputProps={{\r\n            startAdornment: (\r\n              <md.InputAdornment position=\"start\">\r\n                <AccountCircle />\r\n              </md.InputAdornment>\r\n            ),\r\n          }}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n        />\r\n        <md.TextField\r\n          variant=\"outlined\"\r\n          fullWidth={true}\r\n          margin=\"normal\"\r\n          id=\"input-cadastro\"\r\n          label=\"Sobrenome\"\r\n          value={sobrenome}\r\n          onChange={(event) => {\r\n            setSobrenome(event.target.value);\r\n          }}\r\n          InputProps={{\r\n            startAdornment: (\r\n              <md.InputAdornment position=\"start\">\r\n                <AccountCircle />\r\n              </md.InputAdornment>\r\n            ),\r\n          }}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n        />\r\n        <md.TextField\r\n          inputProps={{\r\n            maxlength: 11,\r\n          }}\r\n          variant=\"outlined\"\r\n          fullWidth={true}\r\n          id=\"input-cadastro\"\r\n          margin=\"normal\"\r\n          label=\"CPF\"\r\n          value={cpf}\r\n          onChange={(event) => {\r\n            const { value } = event.target;\r\n            event.target.value = formatCPFNumbers(value);\r\n            setCpf(event.target.value);\r\n          }}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          InputProps={{\r\n            startAdornment: (\r\n              <md.InputAdornment position=\"start\">\r\n                <ContactsIcon/>\r\n              </md.InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n          <md.TextField\r\n          variant=\"outlined\"\r\n          fullWidth={true}\r\n          label=\"Email Cadastro\"\r\n          margin=\"normal\"\r\n          id=\"input-cadastro\"\r\n          value={email}\r\n          onChange={(event) => {\r\n            setEmail(event.target.value);\r\n          }}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          InputProps={{\r\n            startAdornment: (\r\n              <md.InputAdornment position=\"start\">\r\n                <AlternateEmailIcon/>\r\n              </md.InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n            <KeyboardDatePicker\r\n              margin=\"normal\"\r\n              label=\"Data de nascimento\"\r\n              format=\"dd/MM/yyyy\"\r\n              fullWidth={true}\r\n              KeyboardButtonProps={{\r\n                \"aria-label\": \"change date\",\r\n              }}\r\n              value={dataNascimento}\r\n              onChange={(event) => {\r\n                setDataNascimento(event);\r\n                console.log(dataNascimento);\r\n              }}\r\n            />\r\n          </MuiPickersUtilsProvider>\r\n        <md.FormLabel> Promoções </md.FormLabel>\r\n        <md.Switch color=\"primary\" checked={promocao} />\r\n        <md.FormLabel> Novidades </md.FormLabel>\r\n        <md.Switch color=\"primary\" checked={novidade} />\r\n        <a\r\n          id=\"link-edit\"\r\n          href=\"/listagemCadastro\"\r\n          onClick={editRegister}\r\n          className=\"btn btn-primary\"\r\n        >\r\n          Confirmar Alteração\r\n        </a>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\T-Gamer\\Documents\\Projects\\projeto-cadastro\\projeto-cadastro\\front-end\\src\\components\\Formulario\\FormularioCadastro.tsx",["49","50","51"],"import React, { FormEvent, useEffect, useState } from \"react\";\r\nimport * as md from \"@material-ui/core\";\r\nimport \"../Formulario/style.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport axios from \"axios\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\r\nimport AlternateEmailIcon from \"@material-ui/icons/AlternateEmail\";\r\nimport ContactsIcon from \"@material-ui/icons/Contacts\";\r\nimport \"date-fns\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport VpnKeyIcon from \"@material-ui/icons/VpnKey\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardTimePicker,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport { Link } from \"react-router-dom\";\r\nfunction FormularioCadastro() {\r\n  const [nome, setNome] = useState<string>(\"\");\r\n  const [sobrenome, setSobrenome] = useState<string>(\"\");\r\n  const [cpf, setCpf] = useState<string>(\"\");\r\n  const [promocao, setPromocao] = useState<boolean>(true);\r\n  const [novidade, setNovidades] = useState<boolean>(true);\r\n  const [email, setEmail] = useState<string>(\"\");\r\n  const [dataNascimento, setDataNascimento] = useState<Date | null>();\r\n  const [usuario, setUsuario] = useState<string>(\"\");\r\n  const [senha, setSenha] = useState<string>(\"\");\r\n  const notify = () => toast(\"Registro incluido com sucesso!\");\r\n  const formatCPFNumbers = (value: any) => {\r\n    return value.replace(/(\\d{3})(\\d{3})(\\d{3})(\\d{2})/g, \"$1.$2.$3-$4\");\r\n  };\r\n\r\n  function cleanFields() {\r\n    setNome(\"\");\r\n    setSobrenome(\"\");\r\n    setCpf(\"\");\r\n    setEmail(\"\");\r\n    setUsuario(\"\");\r\n    setSenha(\"\");\r\n  }\r\n\r\n  async function handleSubmit(event: FormEvent) {\r\n    event.preventDefault();\r\n    const url = \"http://localhost:3333/register\";\r\n    await axios.post(url, {\r\n      nome: nome,\r\n      sobrenome: sobrenome,\r\n      cpf: cpf,\r\n      promocao: promocao,\r\n      novidades: novidade,\r\n      dataCadastro: new Date(),\r\n      email: email,\r\n      dataNascimento: dataNascimento,\r\n      usuario: usuario,\r\n      senha: senha,\r\n    });\r\n\r\n    cleanFields();\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\" id=\"container-cadastro\">\r\n        <form className=\"form-submit\" onSubmit={handleSubmit}>\r\n          <md.DialogTitle> Formulário de Cadastro </md.DialogTitle>\r\n          <md.TextField\r\n            onChange={(event) => {\r\n              setNome(event.target.value);\r\n            }}\r\n            label=\"Esreva seu nome\"\r\n            variant=\"outlined\"\r\n            fullWidth={true}\r\n            id=\"input-nome\"\r\n            margin=\"normal\"\r\n            value={nome}\r\n            required={true}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <md.InputAdornment position=\"start\">\r\n                  <AccountCircle />\r\n                </md.InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n          <md.TextField\r\n            label=\"Esreva seu sobrenome\"\r\n            variant=\"outlined\"\r\n            fullWidth={true}\r\n            margin=\"normal\"\r\n            id=\"input-cadastro\"\r\n            onChange={(event) => {\r\n              setSobrenome(event.target.value);\r\n            }}\r\n            value={sobrenome}\r\n            required={true}\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <md.InputAdornment position=\"start\">\r\n                  <AccountCircle />\r\n                </md.InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n          <md.TextField\r\n            inputProps={{\r\n              maxlength: 11,\r\n            }}\r\n            label=\"Escreva seu cpf\"\r\n            variant=\"outlined\"\r\n            fullWidth={true}\r\n            id=\"input-cadastro\"\r\n            margin=\"normal\"\r\n            onChange={(event) => {\r\n              const { value } = event.target;\r\n              event.target.value = formatCPFNumbers(value);\r\n              setCpf(event.target.value);\r\n            }}\r\n            value={cpf}\r\n            required={true}\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <md.InputAdornment position=\"start\">\r\n                  <ContactsIcon />\r\n                </md.InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n          <md.TextField\r\n            label=\"Esreva seu email\"\r\n            variant=\"outlined\"\r\n            fullWidth={true}\r\n            margin=\"normal\"\r\n            id=\"input-cadastro\"\r\n            onChange={(event) => {\r\n              setEmail(event.target.value);\r\n            }}\r\n            value={email}\r\n            required={true}\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <md.InputAdornment position=\"start\">\r\n                  <AlternateEmailIcon />\r\n                </md.InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n            <KeyboardDatePicker\r\n              margin=\"normal\"\r\n              label=\"Data de nascimento\"\r\n              format=\"dd/MM/yyyy\"\r\n              fullWidth={true}\r\n              KeyboardButtonProps={{\r\n                \"aria-label\": \"change date\",\r\n              }}\r\n              value={dataNascimento}\r\n              onChange={(event) => {\r\n                setDataNascimento(event);\r\n                console.log(dataNascimento);\r\n              }}\r\n            />\r\n          </MuiPickersUtilsProvider>\r\n          <md.TextField\r\n            onChange={(event) => {\r\n              setUsuario(event.target.value);\r\n            }}\r\n            label=\"Esreva seu usuario\"\r\n            variant=\"outlined\"\r\n            fullWidth={true}\r\n            id=\"input-nome\"\r\n            margin=\"normal\"\r\n            value={usuario}\r\n            required={true}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <md.InputAdornment position=\"start\">\r\n                  <AccountCircle />\r\n                </md.InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n\r\n          <md.TextField\r\n            fullWidth={true}\r\n            id=\"standard-adornment-password\"\r\n            margin=\"normal\"\r\n            label=\"Defina sua senha\"\r\n            variant=\"outlined\"\r\n            type=\"password\"\r\n            value={senha}\r\n            onChange={(event) => {\r\n              setSenha(event.target.value);\r\n            }}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <md.InputAdornment position=\"start\">\r\n                  <VpnKeyIcon />\r\n                </md.InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n          <md.FormLabel> Promoções </md.FormLabel>\r\n          <md.Switch\r\n            checked={promocao}\r\n            color=\"primary\"\r\n            onChange={(event) => {\r\n              setPromocao(event.target.checked);\r\n            }}\r\n            value={promocao}\r\n          />\r\n          <md.FormLabel> Novidades </md.FormLabel>\r\n          <md.Switch\r\n            color=\"primary\"\r\n            checked={novidade}\r\n            onChange={(event) => {\r\n              setNovidades(event.target.checked);\r\n            }}\r\n            value={novidade}\r\n          />\r\n\r\n          <md.Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            size=\"small\"\r\n            type=\"submit\"\r\n            className=\"button-submit\"\r\n            onClick={notify}\r\n          >\r\n            {\" \"}\r\n            Cadastrar{\" \"}\r\n          </md.Button>\r\n\r\n          <ToastContainer />\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\nexport default FormularioCadastro;\r\n","C:\\Users\\T-Gamer\\Documents\\Projects\\projeto-cadastro\\projeto-cadastro\\front-end\\src\\components\\NavBar\\NavBar.tsx",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":7,"column":10,"nodeType":"58","messageId":"59","endLine":7,"endColumn":15},{"ruleId":"60","severity":1,"message":"61","line":50,"column":6,"nodeType":"62","endLine":50,"endColumn":8,"suggestions":"63"},{"ruleId":"64","severity":1,"message":"65","line":161,"column":25,"nodeType":"66","endLine":166,"endColumn":26},{"ruleId":"56","severity":1,"message":"67","line":14,"column":3,"nodeType":"58","messageId":"59","endLine":14,"endColumn":21},{"ruleId":"60","severity":1,"message":"68","line":47,"column":6,"nodeType":"62","endLine":47,"endColumn":8,"suggestions":"69"},{"ruleId":"56","severity":1,"message":"70","line":1,"column":28,"nodeType":"58","messageId":"59","endLine":1,"endColumn":37},{"ruleId":"56","severity":1,"message":"67","line":16,"column":3,"nodeType":"58","messageId":"59","endLine":16,"endColumn":21},{"ruleId":"56","severity":1,"message":"71","line":19,"column":10,"nodeType":"58","messageId":"59","endLine":19,"endColumn":14},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"@typescript-eslint/no-unused-vars","'token' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'token'. Either include it or remove the dependency array.","ArrayExpression",["74"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'KeyboardTimePicker' is defined but never used.","React Hook useEffect has a missing dependency: 'params.id'. Either include it or remove the dependency array.",["75"],"'useEffect' is defined but never used.","'Link' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"76","fix":"77"},{"desc":"78","fix":"79"},"Update the dependencies array to be: [token]",{"range":"80","text":"81"},"Update the dependencies array to be: [params.id]",{"range":"82","text":"83"},[1287,1289],"[token]",[1850,1852],"[params.id]"]